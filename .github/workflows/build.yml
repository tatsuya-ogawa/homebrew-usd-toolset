name: build-openusd

permissions:
  contents: write

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      package_version:
        description: "Version string used for the release/tag"
        required: true
        default: "0.1.0"
      usd_tag:
        description: "OpenUSD git reference (tag/branch/commit)"
        required: true
        default: "release"
      build_usd_args:
        description: "Additional build_usd.py arguments"
        required: false
        default: "--no-tests --no-tutorials --python --materialx"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        runner:
          - macos-13
          - macos-14
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve versions
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "PACKAGE_VERSION=${{ inputs.package_version }}" >> "$GITHUB_ENV"
            echo "USD_TAG=${{ inputs.usd_tag }}" >> "$GITHUB_ENV"
            echo "BUILD_USD_ARGS=${{ inputs.build_usd_args }}" >> "$GITHUB_ENV"
            echo "RELEASE_TAG=v${{ inputs.package_version }}" >> "$GITHUB_ENV"
          else
            ref_name="$GITHUB_REF_NAME"
            stripped="${ref_name#v}"
            echo "PACKAGE_VERSION=$stripped" >> "$GITHUB_ENV"
            echo "USD_TAG=release" >> "$GITHUB_ENV"
            echo "BUILD_USD_ARGS=--no-tests --no-tutorials --python --materialx" >> "$GITHUB_ENV"
            echo "RELEASE_TAG=$ref_name" >> "$GITHUB_ENV"
          fi

      - name: Show configuration
        run: |
          echo "PACKAGE_VERSION=$PACKAGE_VERSION"
          echo "USD_TAG=$USD_TAG"
          echo "BUILD_USD_ARGS=$BUILD_USD_ARGS"
          echo "RELEASE_TAG=$RELEASE_TAG"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          brew update
          brew install cmake ninja || true

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Build OpenUSD artifact
        env:
          USD_TAG: ${{ env.USD_TAG }}
          USD_VERSION: ${{ env.PACKAGE_VERSION }}
          PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}
          BUILD_USD_ARGS: ${{ env.BUILD_USD_ARGS }}
        shell: bash
        run: |
          scripts/build_openusd.sh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: usd-toolset-${{ env.PACKAGE_VERSION }}-${{ runner.os }}-${{ runner.arch }}
          path: |
            dist/*.tar.gz
            dist/*.sha256
            dist/*.json

      - name: Publish GitHub release assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.tar.gz
            dist/*.sha256
            dist/*.json
          tag_name: ${{ env.RELEASE_TAG }}
          name: USD Toolset ${{ env.PACKAGE_VERSION }}

  update-formula:
    name: Update Homebrew formula
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 0

      - name: Resolve version for formula
        run: |
          ref_name="$GITHUB_REF_NAME"
          stripped="${ref_name#v}"
          echo "PACKAGE_VERSION=$stripped" >> "$GITHUB_ENV"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: usd-toolset-*
          path: artifacts
          merge-multiple: true

      - name: Extract SHA256 values
        id: shas
        run: |
          python3 <<'PY' >> "$GITHUB_OUTPUT"
          import json
          import pathlib

          intel = None
          arm = None

          for json_path in pathlib.Path("artifacts").rglob("*.json"):
              data = json.loads(json_path.read_text())
              artifact = data.get("artifact", "")
              sha = data.get("sha256")
              if "X64" in artifact:
                  intel = sha
              elif "ARM64" in artifact:
                  arm = sha

          if not intel or not arm:
              raise SystemExit("Missing SHA256 values in artifacts")

          print(f"intel_sha={intel}")
          print(f"arm_sha={arm}")
          PY
      - name: Update formula file
        run: |
          python3 <<'PY' "$PACKAGE_VERSION" "${{ steps.shas.outputs.intel_sha }}" "${{ steps.shas.outputs.arm_sha }}"
import sys
import pathlib
import re

package_version, intel_sha, arm_sha = sys.argv[1:4]
path = pathlib.Path("Formula/usd-toolset.rb")
text = path.read_text()

version_pattern = r'(  version ")([^"]+)(")'
text, count = re.subn(version_pattern, lambda m: f'{m.group(1)}{package_version}{m.group(3)}', text, count=1)
if count != 1:
    raise SystemExit("Failed to update version in formula")

pattern_intel = r'(macOS-X64\.tar\.gz"\n\s+sha256 ")(.*?)(")'
text, count = re.subn(pattern_intel, lambda m: f'{m.group(1)}{intel_sha}{m.group(3)}', text, count=1)
if count != 1:
    raise SystemExit("Failed to update Intel sha256 block")

pattern_arm = r'(macOS-ARM64\.tar\.gz"\n\s+sha256 ")(.*?)(")'
text, count = re.subn(pattern_arm, lambda m: f'{m.group(1)}{arm_sha}{m.group(3)}', text, count=1)
if count != 1:
    raise SystemExit("Failed to update ARM sha256 block")

path.write_text(text)
PY

      - name: Commit formula update
        env:
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -am "chore: update formula for v$PACKAGE_VERSION"
          git push origin HEAD:"$DEFAULT_BRANCH"
